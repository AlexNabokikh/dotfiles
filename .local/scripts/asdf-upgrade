#!/usr/bin/env python3

import os
import shutil
import subprocess


def log(message):
    """Logs a message to the console."""
    print(f"-> {message}")


def update_asdf_plugins():
    """Updates all asdf plugins."""
    log("Updating all asdf-plugin remotes...")
    subprocess.run(["asdf", "plugin", "update", "--all"])


def get_new_version(plugin):
    """Fetches the latest version of a given plugin."""
    try:
        if plugin == "java":
            return subprocess.getoutput(f'asdf latest "{plugin}" "adoptopenjdk-11"').strip()
        else:
            return subprocess.getoutput(f'asdf latest "{plugin}"').strip()
    except subprocess.CalledProcessError as e:
        log(f"Failed to fetch latest version for {plugin}. Error: {str(e)}")
        return None


def install_plugin(plugin, version):
    """Attempts to install the plugin and returns a boolean indicating success."""
    try:
        subprocess.run(["asdf", "install", plugin, version], check=True)
        return True
    except subprocess.CalledProcessError:
        log(f"Failed to install {plugin} {version}. Skipping.")
        return False


def write_new_versions(infile, outfile):
    """Writes new versions to a given output file based on the input file."""
    log("Updating each plugin reference to the latest revision...")
    for line in infile:
        parts = line.strip().split(" ")
        if len(parts) != 2:
            log(f"Skipping malformed line: {line.strip()}")
            continue
        plugin, current_version = parts
        new_version = get_new_version(plugin)

        if new_version is None:
            outfile.write(line)
            continue

        log(f"Plugin: {plugin}, Current Version: {current_version}, Latest Version: {new_version}")

        if new_version != current_version:
            while True:
                yn = input(f"Do you wish to update {plugin} from {current_version} to {new_version}? (y/n): ")
                if yn.lower().startswith("y"):
                    if install_plugin(plugin, new_version):
                        outfile.write(f"{plugin} {new_version}\n")
                    else:
                        outfile.write(f"{plugin} {current_version}\n")
                    break
                elif yn.lower().startswith("n"):
                    outfile.write(f"{plugin} {current_version}\n")
                    break
                else:
                    log("Please answer yes or no.")
        else:
            outfile.write(line)


def main():
    tool_versions_path = os.path.expanduser("~/.tool-versions")
    new_tool_versions_path = os.path.expanduser("~/.tool-versions.new")
    backup_tool_versions_path = os.path.expanduser("~/.tool-versions.bk")

    update_asdf_plugins()

    try:
        with open(tool_versions_path, "r") as infile, open(new_tool_versions_path, "w") as outfile:
            write_new_versions(infile, outfile)
    except Exception as e:
        log(f"An error occurred: {e}")
        return

    shutil.copy(tool_versions_path, backup_tool_versions_path)
    shutil.move(new_tool_versions_path, tool_versions_path)

    log("Update complete, bye! ðŸ‘‹")


if __name__ == "__main__":
    main()
