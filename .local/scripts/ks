#!/usr/bin/env python3

import configparser
import os
import re
import subprocess

# Define the path to aws-okta
aws_okta_path = os.path.expanduser("~/.aws_okta/aws-okta")


def check_aws_okta():
    """Check if aws-okta is available."""
    if not os.path.exists(aws_okta_path):
        print("Error: aws-okta not found")
        exit(-1)


def get_kube_context():
    """Get the current Kubernetes context and extract account number and region."""
    try:
        kube_context = subprocess.check_output(["kubectl", "config", "current-context"]).decode().strip()
        print(f"Current Kubernetes context: {kube_context}")

        match = re.search(r"arn:aws:eks:([\w-]+):(\d+):cluster/([\w-]+)", kube_context)
        if match:
            region = match.group(1)
            account_number = match.group(2)
            print(f"Account Number: {account_number}, Region: {region}")
            return account_number, region
        else:
            raise ValueError("Invalid Kubernetes context ARN")
    except subprocess.CalledProcessError as e:
        print(f"Error in getting Kubernetes context: {e}")
        exit(-1)


def parse_aws_config():
    """Parse AWS config file."""
    aws_config_path = os.path.expanduser("~/.aws/config")
    if not os.path.exists(aws_config_path):
        print("AWS config file not found")
        exit(-1)

    config = configparser.ConfigParser()
    config.read(aws_config_path)
    return config


def find_profile_name(config, account_number):
    """Find the profile name by matching the account number."""
    for section in config.sections():
        if "role_arn" in config[section] and account_number in config[section]["role_arn"]:
            return section.replace("profile ", "")
    return None


def execute_aws_okta_command(profile_name, region):
    """Execute the aws-okta command with the found values."""
    try:
        subprocess.run([aws_okta_path, "switch", profile_name, region], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error in executing aws-okta command: {e}")
        exit(-1)


def main():
    """Main function."""
    check_aws_okta()
    account_number, region = get_kube_context()
    aws_config = parse_aws_config()
    profile_name = find_profile_name(aws_config, account_number)

    if profile_name:
        print(f"Profile Name: {profile_name}")
        execute_aws_okta_command(profile_name, region)
    else:
        print("Profile not found for the account number")
        exit(-1)


if __name__ == "__main__":
    main()
