#!/usr/bin/env python3

import json
import subprocess
import sys
import time


def check_dependency(command):
    """
    Check if a given command-line tool is installed.

    Args:
        command (str): The command-line tool to check.

    Raises:
        SystemExit: If the command is not installed.
    """
    try:
        subprocess.run([command, "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except FileNotFoundError:
        print(f"Error: The command '{command}' is not found. Please install it before proceeding.")
        sys.exit(1)


def run_command(command_list, capture_output=True):
    """
    Run a shell command and capture its output.

    Args:
        command_list (list): List of command and arguments.
        capture_output (bool, optional): Whether to capture output. Defaults to True.

    Returns:
        str: The standard output of the command.

    Raises:
        SystemExit: If the command fails to execute.
    """
    try:
        result = subprocess.run(command_list, capture_output=capture_output, text=True, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Command failed with error: {e}")
        sys.exit(1)


def prompt():
    """
    Prompt the user to continue or not.

    Returns:
        bool: True if the user wants to continue, False otherwise.

    Raises:
        SystemExit: If the operation is cancelled by the user.
    """
    while True:
        try:
            ans = input("Continue? (y/n): ")
            if ans.lower() == "y":
                return True
            elif ans.lower() == "n":
                return False
            else:
                print("Invalid input. Please enter 'y' or 'n'.")
        except KeyboardInterrupt:
            print("\nOperation cancelled by the user.")
            sys.exit(0)


def get_instances(ASG_NAME):
    """
    Get a list of instance IDs for a given Auto Scaling Group (ASG).

    Args:
        ASG_NAME (str): The name of the ASG.

    Returns:
        list: List of instance IDs.
    """
    return run_command(
        [
            "aws",
            "autoscaling",
            "describe-auto-scaling-groups",
            "--auto-scaling-group-name",
            ASG_NAME,
            "--query",
            "AutoScalingGroups[].Instances[][InstanceId]",
            "--output",
            "text",
        ]
    ).split()


def get_node_name(instance_id):
    """
    Get the node name corresponding to a given EC2 instance ID.

    Args:
        instance_id (str): EC2 instance ID.

    Returns:
        str: Node name.
    """
    return run_command(
        [
            "aws",
            "ec2",
            "describe-instances",
            "--instance-ids",
            instance_id,
            "--query",
            "Reservations[].Instances[].PrivateDnsName",
            "--output",
            "text",
        ]
    )


def get_node_version(node_name):
    """
    Get the Kubernetes version for a given node.

    Args:
        node_name (str): The name of the Kubernetes node.

    Returns:
        str: The Kubernetes version of the node.
    """
    return run_command(
        [
            "kubectl",
            "get",
            "node",
            node_name,
            "-o",
            "custom-columns=VERSION:.status.nodeInfo.kubeletVersion",
            "--no-headers=true",
        ]
    )


def main():
    """
    The main function that orchestrates the entire process of updating Kubernetes nodes.
    """
    for cmd in ["aws", "kubectl"]:
        check_dependency(cmd)

    K8S_VERSION = input("Enter the target Kubernetes version (e.g., 1.24): ")
    if not K8S_VERSION:
        print("Error - Kubernetes version not provided.")
        sys.exit(1)

    WAIT = 60
    ASG_NAME = input("Enter the ASG name: ")

    if not ASG_NAME:
        print("Error - ASG name parameter not provided.")
        sys.exit(1)

    instances = get_instances(ASG_NAME)

    for instance in instances:
        node_name = get_node_name(instance)

        run_command(["kubectl", "get", "node", node_name, "--no-headers=true"])

        node_version = get_node_version(node_name)

        if not node_version:
            print("Version is empty. Skipping...")
            continue

        if K8S_VERSION in node_version:
            print(f"Node {node_name} matches desired version {K8S_VERSION}. Skipping...")
            continue

        if not prompt():
            continue

        run_command(
            ["kubectl", "drain", "--ignore-daemonsets=true", "--delete-emptydir-data=true", "--force", node_name]
        )

        print(f"Waiting {WAIT} seconds ...")
        time.sleep(WAIT)

        print(f"Checking for pods on node {node_name} ...")

        pod_data = json.loads(run_command(["kubectl", "get", "po", "-A", "-o", "json"]))

        for item in pod_data["items"]:
            if item["spec"]["nodeName"] == node_name:
                print(item["metadata"]["name"])

        print("Deleting node in 60 seconds... press Ctrl-C to abort")
        time.sleep(60)
        run_command(["kubectl", "delete", "node", node_name])


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nOperation cancelled by the user. Exiting...")
        sys.exit(1)
