#!/usr/bin/env python3
"""
This script is useful for developers or system administrators who use 'asdf' as their version manager
and want to maintain a clean, organized system by removing outdated versions of tools.

Features:
- Reading Tool Versions: Reads the desired versions of tools from a '.tool-versions' file.
- Fetching Installed Versions: Retrieves all installed versions of a given tool managed by 'asdf'.
- User Interaction: Prompts the user for confirmation before removing any tool version.
- Cleanup of Outdated Versions: Checks for and removes tool versions that are installed but not listed
  in the '.tool-versions' file.

Dependencies:
- 'asdf' version manager: For managing versions of various tools.
- Python 3 and standard libraries: os, subprocess.

Usage:
The script is executed as a standalone Python script. It requires no additional input from the user, 
apart from confirmations for removing outdated versions.
"""

__author__ = "Alexander Nabokikh"
__license__ = "GPL-2.0 license"


import os
import subprocess


def read_tool_versions(file_path):
    """Reads versions of tools from a file."""
    try:
        with open(file_path, "r") as file:
            return [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        print(f"File not found: {file_path}")
        return []


def get_installed_versions(tool_name):
    """Gets installed versions of a given tool."""
    try:
        return subprocess.check_output(["asdf", "list", tool_name], text=True).strip().split("\n")
    except subprocess.CalledProcessError:
        print(f"Error while listing versions for {tool_name}")
        return []


def user_confirmation(message):
    """Asks user for confirmation."""
    while True:
        response = input(message).lower()
        if response in ["y", "n"]:
            return response == "y"
        print("Invalid input. Please enter 'y' or 'n'.")


def ask_and_remove(tool_name, version):
    """Asks for confirmation and removes specified tool and version."""
    if user_confirmation(f"Do you want to remove {tool_name} version {version}? (y/n): "):
        try:
            subprocess.run(["asdf", "uninstall", tool_name, version], check=True)
            print(f"Removed {tool_name} version {version}")
        except subprocess.CalledProcessError:
            print(f"Error while uninstalling {tool_name} version {version}")


def main():
    # Define the path to the .tool-versions file
    tool_versions_file_path = os.path.expanduser("~/.tool-versions")

    # Read the .tool-versions file
    lines = read_tool_versions(tool_versions_file_path)
    if not lines:
        print("No tools found to process.")
        return

    # Loop over each line of the .tool-versions file
    for line in lines:
        old_versions_found = False
        tool_and_versions = line.split()
        tool_name = tool_and_versions[0]
        global_versions = set(tool_and_versions[1:])

        # Get installed versions of the tool
        installed_versions = get_installed_versions(tool_name)

        # Loop over each installed version of the tool
        for version in installed_versions:
            version = version.strip()

            # Skip versions that are marked as in use (having '*')
            if "*" in version:
                continue

            if version not in global_versions:
                old_versions_found = True
                print(f"{tool_name} version {version} not found in .tool-versions")
                ask_and_remove(tool_name, version)

        if not old_versions_found:
            print(f"No old versions found for {tool_name}")


if __name__ == "__main__":
    main()
