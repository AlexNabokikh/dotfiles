#!/usr/bin/env python3

import os
import subprocess

repo_directory = os.path.expanduser("~/Documents/repositories")


def is_git_directory(directory):
    """
    Checks if a directory is a Git repository by looking for a .git subdirectory.
    """
    return os.path.isdir(os.path.join(directory, ".git"))


def git_pull(directory):
    """
    Performs a Git pull operation in the specified directory.
    """
    os.chdir(directory)  # Navigate to directory

    try:
        # Run git pull command for 'master' branch
        subprocess.run(["git", "pull", "origin", "master"], check=True, capture_output=True, text=True)
        print(f"Successfully updated {directory} from 'master' branch.")
    except subprocess.CalledProcessError as e:
        if "fatal: couldn't find remote ref master" in e.stderr:
            try:
                # If 'master' is not found, try pulling from 'main' branch
                subprocess.run(["git", "pull", "origin", "main"], check=True)
                print(f"Successfully updated {directory} from 'main' branch.")
            except subprocess.CalledProcessError as e_inner:
                print(f"Failed to update {directory} from 'main' branch. Error: {str(e_inner)}")
        else:
            print(f"Failed to update {directory} from 'master' branch. Error: {str(e)}")


def main():
    if os.path.exists(repo_directory):
        for root, dirs, _ in os.walk(repo_directory):
            for dir in dirs:
                full_dir_path = os.path.join(root, dir)

                # Skip if the directory is under a .terraform directory
                if ".terraform" in full_dir_path.split("/"):
                    continue

                if is_git_directory(full_dir_path):
                    git_pull(full_dir_path)
    else:
        print(f"The directory {repo_directory} does not exist.")


if __name__ == "__main__":
    main()
