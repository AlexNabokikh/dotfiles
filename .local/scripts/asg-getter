#!/usr/bin/env python3

import subprocess
import sys


def check_dependency(command):
    try:
        subprocess.run([command, "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except FileNotFoundError:
        print(f"Error: The command '{command}' is not found. Please install it before proceeding.")
        sys.exit(1)


def prompt(message):
    try:
        ans = input(message)
        return ans.lower() == "y"
    except KeyboardInterrupt:
        print("\nOperation cancelled by the user.")
        sys.exit(0)


def get_input(label):
    try:
        return input(f"Please enter the {label}: ")
    except KeyboardInterrupt:
        print("\nOperation cancelled by the user.")
        sys.exit(0)


def run_command(command):
    try:
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        stdout, stderr = process.communicate()
        if process.returncode != 0:
            print(f"Command failed with error: {stderr}")
            return None
        return stdout.strip()
    except KeyboardInterrupt:
        print("\nOperation cancelled by the user.")
        sys.exit(0)


def get_asgs(region, cluster_name):
    command = [
        "aws",
        "autoscaling",
        "describe-auto-scaling-groups",
        "--query",
        f"AutoScalingGroups[? Tags[? (Key=='CLUSTER_ID') && Value=='{cluster_name}']].AutoScalingGroupName",
        "--output",
        "text",
        "--region",
        region,
    ]
    asgs_str = run_command(command)
    return asgs_str.split("\t") if asgs_str else []


def get_instances_in_asg(region, asg):
    command = [
        "aws",
        "autoscaling",
        "describe-auto-scaling-groups",
        "--auto-scaling-group-name",
        asg,
        "--query",
        "AutoScalingGroups[].Instances[][InstanceId]",
        "--output",
        "text",
        "--region",
        region,
    ]
    ins_str = run_command(command)
    return ins_str.split() if ins_str else []  # Use split() with default arguments to split by any whitespace


def get_node_by_instance(region, instance_id):
    command = [
        "aws",
        "ec2",
        "describe-instances",
        "--instance-ids",
        instance_id,
        "--query",
        "Reservations[].Instances[].PrivateDnsName",
        "--output",
        "text",
        "--region",
        region,
    ]
    return run_command(command)


if __name__ == "__main__":
    for cmd in ["aws", "kubectl"]:
        check_dependency(cmd)

    AWS_DEFAULT_REGION = get_input("AWS Default Region (e.g., eu-central-1)")
    CLUSTER_NAME = get_input("Cluster Name")

    asgs = get_asgs(AWS_DEFAULT_REGION, CLUSTER_NAME)
    if not asgs:
        print("No ASGs found.")
        exit(1)

    for asg in asgs:
        print(f"Current autoscaling-group: {asg}")
        if not prompt("Continue with this ASG? (y/n): "):
            continue

        instances = get_instances_in_asg(AWS_DEFAULT_REGION, asg)
        if not instances:
            print("No instances found in ASG.")
            continue

        for instance in instances:
            node = get_node_by_instance(AWS_DEFAULT_REGION, instance)
            if node:
                subprocess.run(["kubectl", "get", "node", node, "--no-headers=true"])

        if not prompt("Continue with the next ASG? (y/n): "):
            break
