#!/usr/bin/env python3

import subprocess
import sys


def check_dependency(command):
    """
    Check if a command-line dependency exists.

    :param command: The name of the command to check
    """
    try:
        subprocess.run([command, "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except FileNotFoundError:
        print(f"Error: The command '{command}' is not found. Please install it before proceeding.")
        sys.exit(1)


def prompt(message):
    """
    Prompt the user for a 'y' or 'n' response.

    :param message: The message to display to the user
    :return: True if 'y', False if 'n'
    """
    while True:
        try:
            ans = input(message)
            if ans.lower() == "y":
                return True
            elif ans.lower() == "n":
                return False
            else:
                print("Invalid input. Please enter 'y' or 'n'.")
        except KeyboardInterrupt:
            print("\nOperation cancelled by the user.")
            sys.exit(0)


def get_input(label):
    """
    Get input from the user.

    :param label: Label for the input field
    :return: User input as a string
    """
    try:
        return input(f"Please enter the {label}: ")
    except KeyboardInterrupt:
        print("\nOperation cancelled by the user.")
        sys.exit(0)


def run_command(command):
    """
    Run a shell command.

    :param command: The command to run as a list
    :return: The stdout as a string or None if an error occurs
    """
    try:
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        stdout, stderr = process.communicate()
        if process.returncode != 0:
            print(f"Command failed with error: {stderr}")
            return None
        return stdout.strip()
    except KeyboardInterrupt:
        print("\nOperation cancelled by the user.")
        sys.exit(0)


def get_asgs(region, cluster_name):
    """
    Get the Auto Scaling Groups for a given cluster in a region.

    :param region: AWS region
    :param cluster_name: Name of the cluster
    :return: List of Auto Scaling Groups
    """
    command = [
        "aws",
        "autoscaling",
        "describe-auto-scaling-groups",
        "--query",
        f"AutoScalingGroups[? Tags[? (Key=='CLUSTER_ID') && Value=='{cluster_name}']].AutoScalingGroupName",
        "--output",
        "text",
        "--region",
        region,
    ]
    asgs_str = run_command(command)
    return asgs_str.split("\t") if asgs_str else []


def get_instances_in_asg(region, asg):
    """
    Get the EC2 instances in a given Auto Scaling Group in a region.

    :param region: AWS region
    :param asg: Name of the Auto Scaling Group
    :return: List of instance IDs
    """
    command = [
        "aws",
        "autoscaling",
        "describe-auto-scaling-groups",
        "--auto-scaling-group-name",
        asg,
        "--query",
        "AutoScalingGroups[].Instances[][InstanceId]",
        "--output",
        "text",
        "--region",
        region,
    ]
    ins_str = run_command(command)
    return ins_str.split() if ins_str else []


def get_node_by_instance(region, instance_id):
    """
    Get the node name by instance ID.

    :param region: AWS region
    :param instance_id: EC2 instance ID
    :return: Node name as a string or None if an error occurs
    """
    command = [
        "aws",
        "ec2",
        "describe-instances",
        "--instance-ids",
        instance_id,
        "--query",
        "Reservations[].Instances[].PrivateDnsName",
        "--output",
        "text",
        "--region",
        region,
    ]
    return run_command(command)


if __name__ == "__main__":
    for cmd in ["aws", "kubectl"]:
        check_dependency(cmd)

    AWS_DEFAULT_REGION = get_input("AWS Default Region (e.g., eu-central-1)")
    CLUSTER_NAME = get_input("Cluster Name")

    asgs = get_asgs(AWS_DEFAULT_REGION, CLUSTER_NAME)
    if not asgs:
        print("No ASGs found.")
        exit(1)

    print("Found the following Auto Scaling Groups:")
    for idx, asg in enumerate(asgs):
        print(f"{idx + 1}. {asg}")

    while True:
        asg_number = int(get_input("Enter the number corresponding to the ASG you want to query: "))
        if 1 <= asg_number <= len(asgs):
            selected_asg = asgs[asg_number - 1]
        else:
            print("Invalid ASG number.")
            sys.exit(1)

        print(f"Querying information for autoscaling-group: {selected_asg}")
        instances = get_instances_in_asg(AWS_DEFAULT_REGION, selected_asg)

        if not instances:
            print("No instances found in the selected ASG.")
        else:
            for instance in instances:
                node = get_node_by_instance(AWS_DEFAULT_REGION, instance)
                if node:
                    subprocess.run(["kubectl", "get", "node", node, "--no-headers=true"])

        if not prompt("Would you like to query another ASG? (y/n): "):
            break
